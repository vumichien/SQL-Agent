"""
SQL Accuracy Testing Script

Tests SQL generation accuracy against expected patterns.
Target: ≥85% accuracy
"""

import json
import time
from pathlib import Path
from src.detomo_vanna import DetomoVanna


def load_test_queries():
    """Load test queries from JSON file"""
    queries_file = Path(__file__).parent / 'test_queries.json'
    with open(queries_file, 'r', encoding='utf-8') as f:
        return json.load(f)


def check_sql_accuracy(generated_sql: str, expected_keywords: list) -> bool:
    """
    Check if generated SQL contains expected keywords

    Args:
        generated_sql: The SQL query generated by Vanna
        expected_keywords: List of keywords that should appear in the SQL

    Returns:
        bool: True if all keywords found (case-insensitive)
    """
    sql_upper = generated_sql.upper()
    matches = 0
    total = len(expected_keywords)

    for keyword in expected_keywords:
        if keyword.upper() in sql_upper:
            matches += 1

    # Consider it accurate if at least 80% of keywords match
    # This allows for some variation in SQL syntax
    return matches / total >= 0.8


def test_sql_accuracy():
    """Main test function for SQL accuracy"""
    print("=" * 80)
    print("SQL ACCURACY TEST")
    print("=" * 80)
    print()

    # Initialize Vanna
    print("Initializing DetomoVanna...")
    vn = DetomoVanna(config={
        "path": "./detomo_vectordb",
        "agent_endpoint": "http://localhost:8000/generate"
    })
    vn.connect_to_sqlite("data/chinook.db")
    print("✓ Connected to database")
    print()

    # Load test queries
    test_cases = load_test_queries()
    print(f"Loaded {len(test_cases)} test queries")
    print()

    # Run tests
    results = []
    passed = 0
    failed = 0

    for i, test_case in enumerate(test_cases, 1):
        print(f"[{i}/{len(test_cases)}] Testing: {test_case['question']}")
        print(f"    Category: {test_case['category']} | Difficulty: {test_case['difficulty']}")

        try:
            # Generate SQL
            start_time = time.time()
            generated_sql = vn.generate_sql(test_case['question'])
            elapsed_time = time.time() - start_time

            # Check accuracy
            is_accurate = check_sql_accuracy(generated_sql, test_case['expected_keywords'])

            # Store result
            result = {
                'id': test_case['id'],
                'question': test_case['question'],
                'category': test_case['category'],
                'difficulty': test_case['difficulty'],
                'expected_keywords': test_case['expected_keywords'],
                'generated_sql': generated_sql,
                'is_accurate': is_accurate,
                'response_time': elapsed_time
            }
            results.append(result)

            if is_accurate:
                passed += 1
                print(f"    ✓ PASS ({elapsed_time:.2f}s)")
            else:
                failed += 1
                print(f"    ✗ FAIL ({elapsed_time:.2f}s)")

            print(f"    Generated: {generated_sql[:100]}...")
            print()

        except Exception as e:
            print(f"    ✗ ERROR: {str(e)}")
            print()
            failed += 1
            results.append({
                'id': test_case['id'],
                'question': test_case['question'],
                'category': test_case['category'],
                'error': str(e),
                'is_accurate': False
            })

    # Calculate statistics
    accuracy_rate = (passed / len(test_cases)) * 100
    avg_response_time = sum(r.get('response_time', 0) for r in results) / len(results)

    # Print summary
    print("=" * 80)
    print("SUMMARY")
    print("=" * 80)
    print(f"Total queries tested: {len(test_cases)}")
    print(f"Passed: {passed}")
    print(f"Failed: {failed}")
    print(f"Accuracy rate: {accuracy_rate:.1f}%")
    print(f"Average response time: {avg_response_time:.2f}s")
    print()

    # Breakdown by difficulty
    difficulty_stats = {}
    for result in results:
        if 'difficulty' in result:
            diff = result['difficulty']
            if diff not in difficulty_stats:
                difficulty_stats[diff] = {'passed': 0, 'total': 0}
            difficulty_stats[diff]['total'] += 1
            if result['is_accurate']:
                difficulty_stats[diff]['passed'] += 1

    print("Accuracy by difficulty:")
    for diff, stats in sorted(difficulty_stats.items()):
        acc = (stats['passed'] / stats['total']) * 100
        print(f"  {diff.capitalize()}: {stats['passed']}/{stats['total']} ({acc:.1f}%)")
    print()

    # Breakdown by category
    category_stats = {}
    for result in results:
        if 'category' in result:
            cat = result['category']
            if cat not in category_stats:
                category_stats[cat] = {'passed': 0, 'total': 0}
            category_stats[cat]['total'] += 1
            if result['is_accurate']:
                category_stats[cat]['passed'] += 1

    print("Accuracy by category:")
    for cat, stats in sorted(category_stats.items()):
        acc = (stats['passed'] / stats['total']) * 100
        print(f"  {cat}: {stats['passed']}/{stats['total']} ({acc:.1f}%)")
    print()

    # Check if target met
    target_accuracy = 85.0
    if accuracy_rate >= target_accuracy:
        print(f"✓ Target accuracy met ({accuracy_rate:.1f}% ≥ {target_accuracy}%)")
    else:
        print(f"✗ Target accuracy NOT met ({accuracy_rate:.1f}% < {target_accuracy}%)")

    print("=" * 80)

    # Save detailed results
    results_file = Path(__file__).parent / 'accuracy_results.json'
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump({
            'summary': {
                'total': len(test_cases),
                'passed': passed,
                'failed': failed,
                'accuracy_rate': accuracy_rate,
                'avg_response_time': avg_response_time,
                'target_met': accuracy_rate >= target_accuracy
            },
            'results': results
        }, f, indent=2, ensure_ascii=False)

    print(f"\nDetailed results saved to: {results_file}")

    return accuracy_rate >= target_accuracy


if __name__ == "__main__":
    success = test_sql_accuracy()
    exit(0 if success else 1)
